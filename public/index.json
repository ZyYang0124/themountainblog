
[{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/tags/ipsum/","section":"Tags","summary":"","title":"Ipsum","type":"tags"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/tags/lorem/","section":"Tags","summary":"","title":"Lorem","type":"tags"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/tags/post/","section":"Tags","summary":"","title":"Post","type":"tags"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"写博客的想法由来已久，一来想系统地整理自己的学习笔记，方便总结回顾；二来是想借此机会重拾写作的习惯，记录下一些生活的足迹。虽然现在很多分享生活的 app 可以很容易地做到这些，但是难免被熟人所关注。而开设一个博客，大概只会有我这一个观众，省去诸多麻烦。\n虽然大部分的博客难逃停更的命运，但我尽量督促自己每周更新，希望它可以长久一些。\n","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/posts/post-lite-one/","section":"Posts","summary":"写博客的初衷。","title":"第一篇博文","type":"posts"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/","section":"那山的博客","summary":"","title":"那山的博客","type":"page"},{"content":" 染色体共线性分析 # 以 Siler cupreus 和 Portia taiwannica (两种跳蛛) 为例\n1. 物种间共线性分析 # 数据要求：\n去冗余之后的蛋白质序列 *.faa 基因组注释文件 *.gff 软件要求：MCScanX、mmseqs\n1.1 blast # 数据初步处理：只保留 gene ID，去掉 -RA 后的所有内容\nsed 's/-RA.*//' siler.faa \u0026gt; siler_filitered.fa sed 's/-RA.*//' portia.faa \u0026gt; portia_filitered.fa 1.1.1 基于蛋白序列构建blast数据库 # mmseqs createdb siler_filitered.fa portia_filitered.fa all_mmseqs.db 1.1.2 使用目标物种的 cds/pep/faa/fa 序列与此前构建的数据库进行比对，结果文件为*.blast # mmseqs easy-search all.fa all_mmseqs.db all.blast tmp -s 7.5 --alignment-mode 3 --num-iterations 4 -e 1e-5 --max-accept 5 --threads 70 第三列序列相似性需要百分制，如果全都小于1的话，需扩大100倍\nawk -F'\\t' 'BEGIN{OFS=\u0026quot;\\t\u0026quot;} {$3=sprintf(\u0026quot;%.2f\u0026quot;, $3*100); print}' all.blast \u0026gt; all_m8.blast 最终数据库格式如下：（gene ID 需要简化, 可参考后文替换命令）\nPT00001424\tPT00001424\t100\t278\t0\t0\t1\t278\t1\t278\t2.946E-177\t548 1.2 *.bed 文件准备 # 要求：每个基因保留一个蛋白序列（通常为主转录本）\n1.2.1 将.gff文件转换成MCScanX所需格式（该命令需根据具体物种调整） # MCScanX 不需要原始*gff文件的所有内容，只需要提取其中的第 1, 9, 4, 5 列，其中第 9 列只提取 gene ID 即可\nawk -F \u0026quot;\\t\u0026quot; '{a=substr($9,4,25)}$0~/gene/{print $1 \u0026quot;\\t\u0026quot; a \u0026quot;\\t\u0026quot; $4 \u0026quot;\\t\u0026quot; $5}' siler_maker.gff \u0026gt; siler.gff awk -F \u0026quot;\\t\u0026quot; '{a=substr($9,4,25)}$0~/gene/{print $1 \u0026quot;\\t\u0026quot; a \u0026quot;\\t\u0026quot; $4 \u0026quot;\\t\u0026quot; $5}' portia_maker.gff \u0026gt; portia.gff cat siler.gff portia.gff \u0026gt; all.gff 串联得到的 all.gff 还需进一步调整格式，在这里我查看了文件前 5 行，如下：\nScup_Un155\tSiler_cupreus_00018918;Na\t5062\t30418 Scup_Un155\tSiler_cupreus_00018918-RA\t5062\t30418 Scup_Un110\tSiler_cupreus_00018926;Na\t37738\t48457 Scup_Un110\tSiler_cupreus_00018926-RA\t37738\t48457 Scup_Chr6\tSiler_cupreus_00012661;Na\t359050\t412595 Scup_Chr6\tSiler_cupreus_00012661-RA\t359050\t412595 接下来根据 all.gff 内容，需要作如下调整：\n删除所有带有 “;” 的行 删除所有未成功挂载的染色体（带有 \u0026ldquo;Un\u0026rdquo; 的行） 简化第一列的命名 简化第二列的命名 去重复 #删除所有带有 “;” 的行\ngrep -v \u0026quot;;\u0026quot; all.bed \u0026gt; all1.bed #删除所有未成功挂载的染色体（带有 \u0026ldquo;Un\u0026rdquo; 的行）\ngrep -v \u0026quot;Un\u0026quot; all1.bed \u0026gt; all2.bed #简化第一列的命名\nsed \u0026quot;s/Scup_Chr/sc/g\u0026quot; all2.bed \u0026gt; all3.bed sed 's/Ptai_Chr/Pt/g' all3.bed \u0026gt; all4.bed #简化第二列的命名\n#第二列中 -** 的去除 awk 'BEGIN{OFS=\u0026quot;\\t\u0026quot;} { for (i=1; i\u0026lt;=NF; i++) { sub(/-.*/, \u0026quot;\u0026quot;, $i); } print }' all4.bed \u0026gt; all5.bed #第二列中 gene ID 前缀简化 sed 's/Siler_cupreus_/SC/g' all5.bed \u0026gt; all6.bed sed 's/Portia_taiwanica_/PT/g' all6.bed \u0026gt; all7.bed #去重复\nsort all7.bed | uniq \u0026gt; all.gff 此时得到的all.gff文件如下（当然，在此之前需要删除最初的 all.gff )\npt1\tPT00000001\t923338\t1234673 pt1\tPT00000002\t1283053\t1329480 pt1\tPT00000003\t1423863\t1459005 pt1\tPT00000004\t1510151\t1568055 pt1\tPT00000005\t1568392\t1582644 1.3 运行 MCScanX # 将 all.blast 和 all.gff 置于一个单独文件夹（这里使用 data/），运行 MCScanX\nMCScanX data/all -b 2 -s 5 -e 1e-5 注意：\nall.blast 和 all.gff 两个文件命名除了后缀必须完全相同 两个文件中的gene ID 必须完全相同 MCScanX 运行命令在文件夹后必须跟上统一的文件名 1.4 可视化 # 使用上一步得到的 all.gff 和 all.collinearity 文件\n在 https://www.chiplot.online/ 中绘图\n","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/posts/post-lite-two/","section":"Posts","summary":"以两种跳蛛为例进行的染色体共线性分析初尝试。","title":"染色体共线性分析","type":"posts"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/themountainblog/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/","section":"Tags","summary":"","title":"日常生活","type":"tags"},{"content":"","externalUrl":null,"permalink":"/themountainblog/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/themountainblog/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/themountainblog/tags/%E6%97%A5%E5%B8%B8/","section":"Tags","summary":"","title":"日常","type":"tags"},{"content":"","externalUrl":null,"permalink":"/themountainblog/tags/%E7%94%9F%E6%B4%BB/","section":"Tags","summary":"","title":"生活","type":"tags"}]